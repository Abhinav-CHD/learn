"use strict";
const eslint_etc_1 = require("eslint-etc");
const utils_1 = require("../utils");
const rule = utils_1.ruleCreator({
    defaultOptions: [],
    meta: {
        docs: {
            category: "Best Practices",
            description: "Enforces the passing of `Error` values to error notifications.",
            recommended: false,
        },
        fixable: undefined,
        messages: {
            forbidden: "Passing non-Error values are forbidden.",
        },
        schema: [],
        type: "problem",
    },
    name: "throw-error",
    create: (context) => {
        const { isAny, couldBeObservable, couldBeType } = eslint_etc_1.getTypeServices(context);
        function checkNode(node) {
            if (!isAny(node) && !couldBeType(node, /^(Error|DOMException)$/)) {
                context.report({
                    messageId: "forbidden",
                    node,
                });
            }
        }
        return {
            "ThrowStatement > *": checkNode,
            "CallExpression[callee.name='throwError']": (node) => {
                if (couldBeObservable(node)) {
                    node.arguments.forEach(checkNode);
                }
            },
        };
    },
});
module.exports = rule;
